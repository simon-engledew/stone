title: "Encapsulating MongoDB models in Python"
published: false
category: sysadmin
created_at: 2009-09-15 15:20:00

Recently I have been using MongoDB as a document store for Python objects. To make development a little less painful, I created a class that works as a very simple proxy to the SON object inside:

<div class="code"><pre><code>class SONWrapper(object):
    def __init__(self, son):
        self.__dict__['_son'] = son

    def __getattr__(self, attr):
        if attr in self._son: return self.son[attr]
        return self.__getattribute__(attr)

    def save(self):
        return self.__class__._collection.save(self.son)

    @classmethod
    def remove(klass, *args, **kwargs):
        klass._collection.remove(*args, **kwargs)

    @classmethod
    def find_one(klass, *args, **kwargs):
        son = klass._collection.find_one(*args, **kwargs)
        return klass(son) if son else None

    @classmethod
    def find_all(klass, *args, **kwargs):
        sons = klass._collection.find(*args, **kwargs)
        return [klass(son) for son in sons]

    collection = property(lambda self: self._collection)
    son = property(lambda self: self._son)</code></pre></div>  